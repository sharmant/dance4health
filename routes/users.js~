/**
 * @author Neelam Kumari <neelam1899@gmail.com>, 
 *         Sethuraman Sundararaman <sthrm91@gmail.com>
 */

  var express = require('express');
  var router = express.Router();
  var passport = require('passport');
  var LocalStrategy = require('passport-local').Strategy;
  var User = require('../models/user');
  var EmotionHistory = require('../models/emotionHistory');



  router.get('/register', function(req, res, next) {
    res.render('register',{
      'title': 'Register'
    });
  });

  router.get('/login', ensureUnAuthenticated, function(req, res, next) {
    res.render('login',{
      'title': 'Login'
    });
  });

  router.post('/register',function(req, res, next){
      console.log('a');
      // Get Form Values
      var name = req.body.name;
      console.log(name);
      var email = req.body.email;
      var username = req.body.email;//req.body.username;
      var password = req.body.password;
      var password2 = req.body.password2;
      var profileImageName = 'noimage.png';

      req.checkBody('name','Name field is required').notEmpty();
      req.checkBody('email','Email field is required').notEmpty();
      req.checkBody('email','Email not valid').isEmail();
      //req.checkBody('username','Username field is required').notEmpty();
      req.checkBody('password','Password field is required').notEmpty();
      req.checkBody('password2','Passwords do not match').equals(req.body.password);

      // Check for errors
      var errors = req.validationErrors();
      console.log(errors);
      if(errors){
          console.log('errors');
          res.render('register',{
              errors: errors,
              name: name,
              email: email,
              username: username,
              password: password,
              password2: password2
          });
      } else {
          var newUser = new User({
              name: name,
              email: email,
              username: username,
              password: password,
              profileimage: profileImageName
          });

        var isUserNameOrEmailAvailable = function(message){
          return function(err, user){
            if(err) throw err;
            if(user) {
              errors.concat(message);
              console.log(message);
            }
          }
        }
      // check if username is available
      var errors = [];
      User.getUserByUsername(username,function(err, user){
            if(err) throw err;
            if(user) {
              errors .push({ msg : "User name taken. Please choose a different one"});
              res.render('register',{
              errors: errors,
              name: name,
              email: email,
              username: username,
              password: password,
              password2: password2
          });
            }
            else{
              User.getUserByEmail(email, function(err, user){
            if(err) throw err;
            if(user) {
              errors.push({ msg : "Email already registered"});

              res.render('register',{
              errors: errors,
              name: name,
              email: email,
              username: username,
              password: password,
              password2: password2
          });

            }
            else{
              console.log(newUser);
              User.createUser(newUser, function(err, user){
                  if (err) throw err;
                  console.log('user creation successful');
                  
              });
              // Success Message
                  req.flash('success','You are now registered and may log in');
                  res.location('/');
                  res.redirect('/');
            
            }

          });
        }
           
      });


      }
  });

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    User.getUserById(id, function(err, user) {
      done(err, user);
    });
  });

  passport.use(new LocalStrategy(
      function(username, password, done){
          User.getUserByUsername(username, function(err, user){
              if(err) throw err;
              if(!user){
                  console.log('Unknown User');
                  return done(null, false,{message: 'Unknown User'});
              }

              User.comparePassword(password, user.password, function(err, isMatch){
                  if(err) throw err;
                  if(isMatch){
                      return done(null, user);
                  } else {
                      console.log('Invalid Password');
                      return done(null, false, {message:'Invalid Password'});
                  }
              });
          });
      }
  ));

  router.post('/login', passport.authenticate('local',{failureRedirect:'/users/login', failureFlash:'Invalid username or password'}), function(req, res){
      console.log('Authentication Successful');
      req.flash('success', 'You are logged in');
      res.redirect('/');
  });

router.post('/emotion', ensureAuthenticated, function(req, res){
      var emotion = req.body.emotion;
      console.log(req.body);
      var emotionLog = { username: req.user.username, emotion: emotion, sessionId : req.sessionID };
      EmotionHistory.createLog(emotionLog, function(){
        console.log("emotion is logged successfully!");
      });
      res.send();
  });

  router.get('/logout', function(req, res){
      req.logout();
      req.flash('success','You have logged out');
      res.redirect('/users/login');
  });	

function ensureAuthenticated(req,res,next){
	if(req.isAuthenticated()){
		return next();
	}
	res.redirect('/users/login');
}

function ensureUnAuthenticated(req,res,next){
	if(!req.isAuthenticated()){
      return next();
	}
    else{
      res.redirect('/');
    }
}

  module.exports = router;
